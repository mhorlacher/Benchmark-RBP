import json
from pathlib import Path

gw = glob_wildcards('../../samples-enabled/{DATASET}/{NAME}/fold-{FOLD}/{TYPE}.fold-{FOLD_2}.bed', followlinks=True)
# print(gw)

# DATASETS = ["iONMF", ]

def load_info(info_json):
    with open(info_json) as f:
        return json.loads(f.read())

DATASETS_INFO = dict()
for dataset in list(set(gw.DATASET)):
# for dataset in DATASETS:
    DATASETS_INFO[dataset] = load_info(f'../../../datasets/{dataset}/info.json')

rule ALL:
    input:
        expand('processed/{DATASET}/fold-{FOLD}/input.fasta', DATASET=set(gw.DATASET), FOLD=set(gw.FOLD))

def list_subdir_names(path):
    return [x.name for x in Path(path).iterdir() if x.is_dir()]


rule add_rbp_name:
    input:
        filename = '../../samples-enabled/{DATASET}/{NAME}/fold-{FOLD}/positive.fold-{FOLD_2}.bed'
    output:
        bed = temp('processed/{DATASET}/{NAME}/fold-{FOLD}/positive.fold-{FOLD_2}.rbp.bed')
    params:
        rbp = '{NAME}'
    shell:
        './scripts/add_rbp_name.sh {input.filename} {params.rbp} > {output.bed}'

rule prepare_negatives:
    input:
        filename = '../../samples-enabled/{DATASET}/{NAME}/fold-{FOLD}/negative-1.fold-{FOLD_2}.bed'
    output:
        bed = temp('processed/{DATASET}/{NAME}/fold-{FOLD}/negative-1.fold-{FOLD_2}.rbp.bed')
    params:
        rbp = 'negative-1'
    shell:
        './scripts/add_rbp_name.sh {input.filename} {params.rbp} > {output.bed}'

rule generate_windows_bed:
    input:
        beds = lambda wc: expand('processed/{DATASET}/{NAME}/fold-{FOLD}/{POSNEG}.fold-{FOLD}.rbp.bed', POSNEG=["positive","negative-1"], NAME=list_subdir_names(f'../../samples-enabled/{wc.DATASET}'), allow_missing=True),
        transcript_bed = lambda wc: f".split/gencode.{DATASETS_INFO[wc.DATASET]['gencode']}/{DATASETS_INFO[wc.DATASET]['genome']}/transcripts.fold-{wc.FOLD}.bed",
    output:
        bed = temp('processed/{DATASET}/fold-{FOLD}/input.bed')
    params:
        bin_size = 50,
    shell:
        'python scripts/generate_labeled_windows_bed.py {input.beds} --bin-size {params.bin_size} --transcript-bed {input.transcript_bed} > {output}'

rule filter_bed:
    input:
        bed = temp('processed/{DATASET}/fold-{FOLD}/input.bed')
    output:
        bed = temp('processed/{DATASET}/fold-{FOLD}/input.filt.bed')
    params:
        filt = "negative-1"
    shell:
        'python scripts/filter_bed.py --bed {input.bed} --filt {params.filt} > {output.bed}'


# Deepripe uses bin size of 50 and sequence length of 150 centered around each bin
rule slop_to_sequence_size:
    input:
        bed = 'processed/{DATASET}/fold-{FOLD}/input.filt.bed'
    output:
        bed = temp('processed/{DATASET}/fold-{FOLD}/input.slop.bed')
    params:
        chromsizes = lambda wc: f"../../../meta/genomes/{DATASETS_INFO[wc.DATASET]['genome']}/{DATASETS_INFO[wc.DATASET]['genome']}.genomefile",
        slop = 50
    shell:
        'bedtools slop -i {input.bed} -g {params.chromsizes} -b {params.slop} > {output.bed}'

# But region len of 250
rule bed_to_fasta:
    input:
        bed = 'processed/{DATASET}/fold-{FOLD}/input.slop.bed'   
    output:
        fasta = 'processed/{DATASET}/fold-{FOLD}/input.fasta',
        region_fasta = 'processed/{DATASET}/fold-{FOLD}/input.region.fasta',
    params:
        genome_fa = lambda wc: f"../../../meta/genomes/{DATASETS_INFO[wc.DATASET]['genome']}/{DATASETS_INFO[wc.DATASET]['genome']}.fa",
        region_bw_minus = lambda wc: f"../../../meta/genomes/{DATASETS_INFO[wc.DATASET]['genome']}/minus.bw",
        region_bw_plus = lambda wc: f"../../../meta/genomes/{DATASETS_INFO[wc.DATASET]['genome']}/plus.bw",
        region_len = 150
    shell:
        """
        # set +u
        # source $HOME/.bashrc
        # conda activate multirbp-gpu
        # set -u

        python scripts/bed_to_fasta.py --input-bed {input.bed} --genome-fasta {params.genome_fa} --bw-minus {params.region_bw_minus} \
        --bw-plus {params.region_bw_plus} --region-len {params.region_len} --output-fasta {output.fasta} --output-region-fasta {output.region_fasta}
        """