import json

gw = glob_wildcards("../../samples-enabled/{DATASET}/{NAME}/fold-{FOLD}/{TYPE}.fold-{FOLD_2}.bed", followlinks=True)
# print(gw)
# for D, N, F, T in zip(gw.DATASET, gw.NAME, gw.FOLD, gw.TYPE):
#     print(D, N, F, T)

def load_info(info_json):
    with open(info_json) as f:
        return json.loads(f.read())

DATASETS_INFO = dict()
for dataset in list(set(gw.DATASET)):
    DATASETS_INFO[dataset] = load_info(f'../../../datasets/{dataset}/info.json')


### ALL Rule ###
rule ALL:
    input:
        expand("processed/{DATASET}/{NAME}/fold-{FOLD}/{TYPE}.fold-{FOLD}.fasta", zip, DATASET=gw.DATASET, NAME=gw.NAME, FOLD=gw.FOLD, TYPE=gw.TYPE)


rule slop_bed:
    input:
        bed = "../../samples-enabled/{DATASET}/{NAME}/fold-{FOLD}/{TYPE}.fold-{FOLD}.bed"
    output:
        bed = "processed/{DATASET}/{NAME}/fold-{FOLD}/{TYPE}.fold-{FOLD}.bed"
    params:
        genomefile = lambda wc: f"../../../meta/genomes/{DATASETS_INFO[wc.DATASET]['genome']}/{DATASETS_INFO[wc.DATASET]['genome']}.genomefile",
        slop = int(75/2) + 15 + 150, # 75: max-size, 15: extended viewpoint, 150: for structure prediction
    shell:
        "bedtools slop -g {params.genomefile} -b {params.slop} -i {input.bed} > {output.bed}"

rule bed_to_fasta:
    input:
        bed = "processed/{DATASET}/{NAME}/fold-{FOLD}/{TYPE}.fold-{FOLD}.bed"
    output:
        fasta = "processed/{DATASET}/{NAME}/fold-{FOLD}/{TYPE}.fold-{FOLD}.extended.fasta"
    params:
        genome_fa = lambda wc: f"../../../meta/genomes/{DATASETS_INFO[wc.DATASET]['genome']}/{DATASETS_INFO[wc.DATASET]['genome']}.fa",
    shell:
        "bedtools getfasta -s -fi {params.genome_fa} -bed {input} > {output}"

rule process_viewpoint_fasta:
    input:
        fasta = "processed/{DATASET}/{NAME}/fold-{FOLD}/{TYPE}.fold-{FOLD}.extended.fasta"
    output:
        fasta = "processed/{DATASET}/{NAME}/fold-{FOLD}/{TYPE}.fold-{FOLD}.fasta"
    run:
        with open(input.fasta) as f_in, open(output.fasta, 'w') as f_out:
            for line in f_in:
                assert line[0] == '>'
                print(line.strip(), file=f_out)
                seq = f_in.readline().strip()
                viewpoint_seq = seq[:150].lower() + seq[150:-150].upper() + seq[-150:].lower()
                print(viewpoint_seq, file=f_out)